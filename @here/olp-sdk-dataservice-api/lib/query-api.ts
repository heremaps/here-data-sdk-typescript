/*
 * Copyright (C) 2019 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

/**
 * Query API v1
 * The `query` service provides a way to get information (metadata) about layers and partitions stored in a catalog.
 * This service exposes the metadata for single partitions that users can query one by one or by specifying a parent tile.
 *
 * OpenAPI spec version: 1.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Do not edit the class manually.
 */

import { RequestBuilder, RequestOptions, UrlBuilder } from "./RequestBuilder";

export interface Index {
    /**
     * Result of the index resource call. For each parent tile, one element with the respective parent-quad data is contained in the array.
     */
    parentQuads: ParentQuad[];
    /**
     * Result of the index resource call. For each tile that contains data in the requested quadKey,
     * one element with the respective sub-quad data is contained in the array.
     */
    subQuads: SubQuad[];
}

export interface ParentQuad {
    /**
     * Optional value for the additional metadata specified by the publisher
     */
    additionalMetadata?: string;
    /**
     * The checksum field is optional. The response includes the checksum only
     *  if you specify `checksum` in the `additionalFields` query parameter, and if a checksum was specified in the
     *  partition metadata when it was published. You need to use the SHA-1 checksum of the data content if you want
     * data comparison to work for this catalog. The maximum length of the checksum field is 128 characters.
     */
    checksum?: string;
    /**
     * Optional value for the size of the compressed partition data in bytes. The response only includes the
     *  compressed data size if you specify `compressedDataSize` in the `additionalFields` query parameter, and if
     *  compression is enabled, and if `compressedDataSize` was specified in the partition metadata when it was published.
     */
    compressedDataSize?: number;
    /**
     * The dataHandle must not contain any characters that are not part of the reserved and unreserved set as defined
     *  in RFC3986. This field must not have an empty value. If the dataHandle is not present when comparing two versions,
     * the partition was deleted. The maximum length of dataHandle is 1024 characters.
     */
    dataHandle: string;
    /**
     * Optional value for the size of the partition data in bytes. The response only includes the data size if
     *  you specify dataSize` in the `additionalFields` query parameter, and if `dataSize` was specified in the partition
     *  metadata when it was published.
     */
    dataSize?: number;
    /**
     * The id of the tile
     */
    partition: string;
    /**
     * Version of the catalog when this partition was first published
     */
    version: number;
}

/**
 * Describes the partition object which is unique within a layer.
 */
export interface Partition {
    /**
     * The checksum of the partition. It's only provided to API calls that explicitly request a checksum and only matches
     *  partitions that have a checksum defined. You can request partitions with a specific checksum by using the `additionalFields`
     *  query parameter. If you need to compare data sets for this catalog, set this field to match the
     *  SHA-1 checksum of the corresponding data blob. The maximum length of the checksum field is 128 characters.
     */
    checksum?: string;
    /**
     * Indicates the compressed size of the partition data in bytes when data compression is enabled.
     * It's only provided to API calls that explicitly request the compressed data size and only matches
     * partitions that have a compressed data size defined. You can request partitions with a specific
     * compressed data size by using the `additionalFields` query parameter.
     */
    compressedDataSize?: number;
    /**
     * You use the data handle when retrieving the data that relates to this partition. The data handle
     *  identifies a specific blob so that you can request the blob's contents with the Blob API.
     *  When requesting data from the Blob API, you must specify the catalog ID, layer ID and the dataHandle.
     */
    dataHandle?: string;
    /**
     * Indicates the uncompressed size of the partition data in bytes. It's only provided to
     *  API calls that explicitly request the data size and only matches partitions that have a
     *  data size defined. You can request partitions with a specific data size by using the `additionalFields` query parameter.
     */
    dataSize?: number;
    /**
     * The partition key. This is a unique key for a partition within a layer. If the layer's
     * partitioning scheme is set to `heretile`, the partition key is equivalent to the tile key.
     *  The partition key cannot be empty. The maximum length of the partition key is 500 characters.
     */
    partition: string;
    /**
     * For active versioned partitions, the version of the catalog when this partition was last
     *  changed. For volatile partitions this will always be -1.
     */
    version: number;
}

/**
 * Describes a list of partitions for a given layer and layer version.
 */
export interface Partitions {
    partitions: Partition[];
}

export interface SubQuad {
    /**
     * Optional value for the additional meta-data specified by the publisher.
     */
    additionalMetadata?: string;
    /**
     * The checksum field is optional. The response only includes this information if you specify
     *  checksum in the request (using `additionalFields` query parameter), and if the request for the commit of
     *  the partition  a checksum was provided during commit of the partition. It should be set to the sha1
     *  checksum of the data content if data comparison needs to work for this catalog.
     * The maximum length of checksum field is 128 characters.
     */
    checksum?: string;
    /**
     * Optional value for the size of the compressed partition data in bytes.
     *  Compressed size of the data when using Blob API in the data client with compression
     * enabled to commit to Data Service.  The response only includes this information if
     *  you specify the compressedDataSize field in the request, and if the request for the
     *  commit of the partition specifies compressedDataSize.
     */
    compressedDataSize?: number;
    /**
     * To store data in the directly dataHandle, use the `data` URL scheme (RFC 2397). The
     * dataHandle must not contain any characters that are not part of the reserved and unreserved
     * set as defined in RFC3986. This field can have an empty value. When comparing two versions
     *  and if the dataHandle is not present, the partition was deleted. The maximum length of dataHandle is 1024 characters.
     */
    dataHandle: string;
    /**
     * Optional value for the size of the partition data in bytes. Uncompressed size of the data when
     * using Blob API in the data client with compression enabled or disabled to commit to Data Service.
     *  The response only includes this information if you specify the dataSize field in the requested,
     * and if the request for the commit of the partition specifies dataSize.
     */
    dataSize?: number;
    /**
     * Variable length string defining the child of the passed in quadKey tile. Depending on the
     *  partitioning scheme of the layer, either a `quadtree` (deprecated) or a `heretile` formatted
     *  id from the sub quad will be returned. When the quadKey is referenced in the response
     * (e.g. when depth is 0), subQuadKey is an empty string for `quadtree` partitioning, and `1` for `heretile` partitioning.
     */
    subQuadKey: string;
    /**
     * Version of the catalog when this partition was first published.
     */
    version: number;
}

/* ===================================================================
 * QueryApi
 */

/**
 * Gets the latest partition changes for a version range in a versioned layer or a time range
 * for a volatile layer. Only the latest change for each changed partition is returned, not
 *  intermediate changes. If the response contains a partition with an empty 'dataHandle' value,
 *  the partition was deleted at the version indicated by the 'version' field of the partition object.
 *  If a partition was created and deleted between the versions specified in the 'startVersion' and 'endVersion'
 * parameters, the partition is not included in the response. For example, if you request versions 0 to 10, and a
 * partition was created in version 3 then deleted in version 7, it is not included in the response.
 *
 * @summary Gets changes for the version or time range for the specific partition(s).
 * @param layerId The ID of the layer specified in the request. The value of this parameter must refer to a
 *  valid layer already configured in the catalog configuration. You can specify multiple layers as additional parameters.
 * @param partition The partitions you want to include in the response. This allows you to limit the response to
 * specific partitions. You can specify multiple partitions by using this parameter multiple times. The maximum
 *  number of partitions per call is 100.
 * @param startVersion Start version for the catalog (exclusive). By convention -1 indicates the virtual initial
 *  version before the first publication which will have version 0.
 * @param endVersion End version (inclusive). This has to be a valid catalog version greater than the startVersion.
 * @param sinceTime Will return partitions whose data has been modified since this time, in milliseconds since epoch, inclusive.
 * @param additionalFields Additional fields - &#x60;dataSize&#x60;, &#x60;checksum&#x60;, &#x60;compressedDataSize&#x60;.
 * @param billingTag Billing Tag is an optional free-form tag which is used for grouping billing records together.
 *  If supplied, it must be between 4 - 16 characters, contain only alpha/numeric ASCII characters  [A-Za-z0-9].
 * Grouping billing records by billing tag will be available in future releases.
 */
export async function getChangesById(
    builder: RequestBuilder,
    params: {
        layerId: string;
        partition: string[];
        startVersion?: string;
        endVersion?: string;
        sinceTime?: number;
        additionalFields?: string[];
        billingTag?: string;
    }
): Promise<Partitions> {
    const baseUrl = "/layers/{layerId}/changes".replace(
        "{layerId}",
        UrlBuilder.toString(params["layerId"])
    );

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);
    urlBuilder.appendQuery("startVersion", params["startVersion"]);
    urlBuilder.appendQuery("endVersion", params["endVersion"]);
    urlBuilder.appendQuery("sinceTime", params["sinceTime"]);
    urlBuilder.appendQuery("additionalFields", params["additionalFields"]);
    urlBuilder.appendQuery("partition", params["partition"]);
    urlBuilder.appendQuery("billingTag", params["billingTag"]);

    const headers: { [header: string]: string } = {};
    const options: RequestOptions = {
        method: "GET",
        headers
    };

    return builder.request<Partitions>(urlBuilder, options);
}

/**
 * Gets metadata for specific partition ids. If the layer specified in the request does not exist, the request results in an error.
 * If a partition specified in the request does not exist, the response does not include this partition.
 *  Maximun allowed number of partitions ids per call is 100.
 *
 * @summary Gets metadata for the requested partitions
 * @param layerId The ID of the layer specified in the request. The content of this parameter
 *  must refer to a valid layer already configured in the catalog configuration.
 *  You can specify multiple partitions by using this parameter multiple times.
 * @param partition Partition ids to use for filtering. You can specify multiple
 *  partitions by using this parameter multiple times. Maximum allowed partitions ids per call is 100.
 * @param version The version of the catalog against which to run the query. Must be a valid catalog version.
 * @param additionalFields Additional fields - &#x60;dataSize&#x60;, &#x60;checksum&#x60;, &#x60;compressedDataSize&#x60;
 * @param billingTag Billing Tag is an optional free-form tag which is used for grouping billing
 *  records together. If supplied, it must be between 4 - 16 characters, contain only alpha/numeric
 * ASCII characters  [A-Za-z0-9]. Grouping billing records by billing tag will be available in future releases.
 */
export async function getPartitionsById(
    builder: RequestBuilder,
    params: {
        layerId: string;
        partition: string[];
        version?: string;
        additionalFields?: string[];
        billingTag?: string;
    }
): Promise<Partitions> {
    const baseUrl = "/layers/{layerId}/partitions".replace(
        "{layerId}",
        UrlBuilder.toString(params["layerId"])
    );

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);
    params["partition"].forEach((item: string) => {
        urlBuilder.appendQuery("partition", item);
    });
    urlBuilder.appendQuery("version", params["version"]);
    urlBuilder.appendQuery("additionalFields", params["additionalFields"]);
    urlBuilder.appendQuery("billingTag", params["billingTag"]);

    const headers: { [header: string]: string } = {};
    const options: RequestOptions = {
        method: "GET",
        headers
    };

    return builder.request<Partitions>(urlBuilder, options);
}

/**
 * Gets metadata for the requested index. Only available for versioned layers where the partitioning scheme is `heretile`.
 *
 * @summary Gets index metadata of versioned
 * @param layerId The ID of the layer specified in the request. Content of this
 * parameter must refer to a valid layer already configured in the catalog configuration. Exactly one layer ID must be provided.
 * @param version The version of the catalog against which to run the query. Must be a valid catalog version.
 * @param quadKey The geometric area specified by an index in the request, represented as a HERE tile
 * @param depth The recursion depth of the response. If set to 0, the response includes
 *  only data for the quadKey specified in the request. In this way, depth describes the
 * maximum length of the subQuadKeys in the response. The maximum allowed value for the depth parameter is 4.
 * @param additionalFields Additional fields - &#x60;dataSize&#x60;, &#x60;checksum&#x60;, &#x60;compressedDataSize&#x60;
 * @param billingTag Billing Tag is an optional free-form tag used to group billing records
 *  together. If supplied, it must be between 4 - 16 characters and  contain only alphanumeric
 *  ASCII characters  [A-Za-z0-9]. Grouping billing records by billing tag will be available in a future release.
 */
export async function quadTreeIndex(
    builder: RequestBuilder,
    params: {
        layerId: string;
        version: number;
        quadKey: string;
        depth: number;
        additionalFields?: string[];
        billingTag?: string;
    }
): Promise<Index> {
    const baseUrl = "/layers/{layerId}/versions/{version}/quadkeys/{quadKey}/depths/{depth}"
        .replace("{layerId}", UrlBuilder.toString(params["layerId"]))
        .replace("{version}", UrlBuilder.toString(params["version"]))
        .replace("{quadKey}", UrlBuilder.toString(params["quadKey"]))
        .replace("{depth}", UrlBuilder.toString(params["depth"]));

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);
    urlBuilder.appendQuery("additionalFields", params["additionalFields"]);
    urlBuilder.appendQuery("billingTag", params["billingTag"]);

    const headers: { [header: string]: string } = {};
    const options: RequestOptions = {
        method: "GET",
        headers
    };

    return builder.request<Index>(urlBuilder, options);
}

/**
 * Gets metadata for the requested index. Only available for volatile layers where the partitioning scheme is `heretile`.
 *
 * @summary Gets index metadata for volatile layers
 * @param layerId The ID of the layer specified in the request. Content of this parameter must refer to a
 *  valid layer already configured in the catalog configuration. Exactly one layer ID must be provided.
 * @param quadKey The geometric area specified by an index in the request, represented as a HERE tile
 * @param depth The recursion depth of the response. If set to 0, the response includes only data for
 *  the quadKey specified in the request. In this way, depth describes the maximum length of the subQuadKeys
 *  in the response. The maximum allowed value for the depth parameter is 4.
 * @param additionalFields Additional fields - &#x60;dataSize&#x60;, &#x60;checksum&#x60;, &#x60;compressedDataSize&#x60;
 * @param billingTag Billing Tag is an optional free-form tag used to group billing records together.
 * If supplied, it must be between 4 - 16 characters and  contain only alphanumeric ASCII characters
 *  [A-Za-z0-9]. Grouping billing records by billing tag will be available in a future release.
 */
export async function quadTreeIndexVolatile(
    builder: RequestBuilder,
    params: {
        layerId: string;
        quadKey: string;
        depth: number;
        additionalFields?: string[];
        billingTag?: string;
    }
): Promise<Index> {
    const baseUrl = "/layers/{layerId}/quadkeys/{quadKey}/depths/{depth}"
        .replace("{layerId}", UrlBuilder.toString(params["layerId"]))
        .replace("{quadKey}", UrlBuilder.toString(params["quadKey"]))
        .replace("{depth}", UrlBuilder.toString(params["depth"]));

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);
    urlBuilder.appendQuery("additionalFields", params["additionalFields"]);
    urlBuilder.appendQuery("billingTag", params["billingTag"]);

    const headers: { [header: string]: string } = {};
    const options: RequestOptions = {
        method: "GET",
        headers
    };

    return builder.request<Index>(urlBuilder, options);
}
