/*
 * Copyright (C) 2019 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

/**
 * Config API v1
 * The `config` service provides basic catalog management operations.
 * It manages all platform resources needed for different kinds of catalogs and operations on them.
 *
 * OpenAPI spec version: 1.1.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Do not edit the class manually.
 */

import { RequestBuilder, RequestOptions, UrlBuilder } from "./RequestBuilder";

// tslint:disable: array-type

/**
 * List of billing tags a free-form tag which is used for grouping billing records together. If supplied,
 * it must be between 4 - 16 characters, contain only alphanumeric ASCII characters [A-Za-z0-9].
 */
export type BillingTags = string[];

export interface ParentQuad {
    /**
     * Optional value for the additional metadata specified by the publisher
     */
    additionalMetadata?: string;
    /**
     * The checksum field is optional. The response only includes this information if you specify
     * the checksum in the request (using the `additionalFields` query parameter) and if the request
     * for the commit of the partition specifies a checksum. You need to use the 'sha1' checksum of
     * the data content if you want the data comparison to work for this catalog. The maximum length
     * of the `checksum` field is 128 characters.
     */
    checksum?: string;
    /**
     * Optional value for the size of the compressed partition data in bytes. Compressed size of the
     * data when using Blobstore in the datastore-client with compression enabled to commit to Data
     * Service. The response only includes this information if you specify the `compressedDataSize`
     * field in the request, and if the request for the commit of the partition specifies a
     * `compressedDataSize`.
     */
    compressedDataSize?: number;
    /**
     * The `dataHandle` uniquely identifies a tile within the scope of the layer’s dataUrl. The
     * combination of dataURL + `dataHandle` should be a fully qualified URL. To store data in the
     * `dataHandle` directly the 'data' URL scheme (RFC 2397) should be used. The `dataHandle` must
     * not contain any characters that are not part of the reserved and unreserved set as defined in
     * RFC3986. Empty value of this field is allowed. If the `dataHandle` is empty or omitted, it
     * means that the partition is deleted. To delete a partition in the new version, the
     * `dataHandle` should be omitted or empty string provided. The maximum length of `dataHandle`
     * is 1024 characters.
     */
    dataHandle: string;
    /**
     * Optional value for the size of the partition data in bytes. Uncompressed size of the data
     * when using Blobstore in the datastore-client with compression enabled or disabled to commit
     * to Data Service. The response only includes this information if you specify the `dataSize`
     * field in the request, and if the request for the commit of the partition specifies
     * `dataSize`.
     */
    dataSize?: number;
    /**
     * The id of the tile
     */
    partition: string;
    /**
     * Version of the catalog when this partition was first published
     */
    version: number;
}

export interface SubQuad {
    /**
     * Optional value for the additional meta-data specified by the publisher.
     */
    additionalMetadata?: string;
    /**
     * The checksum field is optional. The response only includes this information if you specify
     * checksum in the request (using `additionalFields` query parameter), and if the request for
     * the commit of the partition a checksum was provided during commit of the partition. It should
     * be set to the sha1 checksum of the data content if the data comparison needs to work for this
     * catalog. The maximum length of `checksum` field is 128 characters.
     */
    checksum?: string;
    /**
     * Optional value for the size of the compressed partition data in bytes. Compressed size of the
     * data when using Blobstore in the datastore-client with compression enabled to commit to Data
     * Service.  The response only includes this information if you specify the `compressedDataSize`
     * field in the request, and if the request for the commit of the partition specifies
     * `compressedDataSize`.
     */
    compressedDataSize?: number;
    /**
     * The `dataHandle` uniquely identifies a tile within the scope of the layer’s dataUrl. The
     * combination of dataURL + `dataHandle` should be a fully qualified URL. To store data in the
     * `dataHandle` directly the 'data' URL scheme (RFC 2397) should be used. The `dataHandle` must
     * not contain any characters that are not part of the reserved and unreserved set as defined in
     * RFC3986. Empty value of this field is allowed. If the `dataHandle` is empty or omitted, it
     * means that the partition is deleted. To delete a partition in the new version, the
     * `dataHandle` should be omitted or empty string provided. The maximum length of `dataHandle`
     * is 1024 characters.
     */
    dataHandle: string;
    /**
     * Optional value for the size of the partition data in bytes. Uncompressed size of the data
     * when using Blobstore in the datastore-client with compression enabled or disabled to commit
     * to Data Service. The response only includes this information if you specify the `dataSize`
     * field in the requested, and if the request for the commit of the partition specifies
     * `dataSize`.
     */
    dataSize?: number;
    /**
     * Variable length string defining the child of the passed in the quadkey tile. Depending on the
     * partitioning scheme of the layer, either a 'quadtree' (deprecated) or a 'heretile' formatted
     * id from the sub quad will be returned. When the quadkey is referenced in the response (for
     * example, when depth is 0), subQuadKey is an empty string for 'quadtree' partitioning, and '1'
     * for 'heretile' partitioning.
     */
    subQuadKey: string;
    /**
     * Version of the catalog when this partition was first published.
     */
    version: number;
}

export interface Index {
    /**
     * Result of the index resource call. For each parent tile, one element with the respective
     * parent-quad data is contained in the array.
     */
    parentQuads: ParentQuad[];
    /**
     * Result of the index resource call. For each tile that contains data in the requested quadkey,
     * one element with the respective sub-quad data is contained in the array.
     */
    subQuads: SubQuad[];
}

/**
 * Describes the catalog layer properties.
 */
export interface Layer {
    /**
     * Billing tag is an optional free-form tag, which is used for grouping billing records
     * together. If supplied, it must be between 4 - 16 characters, contain only alpha/numeric ASCII
     * characters `[A-Za-z0-9]`.
     */
    billingTags?: BillingTags;
    /**
     * Identifies whether the data is compressed.
     */
    contentEncoding?: ContentEncoding;
    /**
     * The mime type of the data is stored in this layer.
     */
    contentType?: ContentType;
    /**
     * The geographic areas that this layer covers, grouped by admin areas.
     */
    coverage?: Coverage;
    /**
     * The person who created this layer.
     */
    creator?: Creator;
    /**
     * A detailed description of the layer and what it contains. This information appears on the
     * 'Overview' tab when you open a layer in the platform portal.
     */
    description?: string;
    /**
     * The HERE Resource Name (HRN) of the layer.
     */
    hrn: string;
    /**
     * This ID should be unique to one environment. You can use the same ID again in another context
     * such as a production environment. This ID forms part of the HERE Resource Name (HRN) for the
     * layer.
     */
    id: string;
    /**
     * The type of data availability that this layer provides.
     */
    layerType:
        | IndexLayerType
        | StreamLayerType
        | VersionedLayerType
        | VolatileLayerType;
    /**
     * A descriptive name for the layer.
     */
    name?: string;
    /**
     * The name of the partitioning scheme for this layer.
     */
    partitioning: Partitioning;
    /**
     * The HRN of the data schema for this layer.
     */
    schema?: Schema;
    /**
     * Properties that define the scale of the streaming service required for this layer.
     */
    streamProperties?: StreamProperties;
    /**
     * A one-sentence summary of the layer. You can see this summary when you browse a list of
     * layers on the platform portal.
     */
    summary?: string;
    /**
     * Some keywords that help to find the catalog when searching in the platform portal.
     */
    tags?: Tags;
    /**
     * Properties that describe the volume where the data is physically stored.
     */
    volume?: DurableVolume | VolatileVolume;
    digest?: Digest;
}

/**
 * Describes the catalog properties.
 */
export interface Catalog {
    /**
     * Aggregated list of all layers` billing tags.
     * Please note that this element is read only and does not exist in CreateCatalog.
     * If posted during catalog creation the value will be ignored.
     */
    billingTags?: BillingTags;
    coverage?: Coverage;
    /**
     * The creation date and time.
     */
    created: string;
    /**
     * A detailed description of the catalog and what it contains.
     * This information appears on the 'Overview' tab when you open a catalog in the platform portal.
     */
    description: string;
    /**
     * The HERE Resource Name (HRN) of the catalog.
     */
    hrn: string;
    /**
     * The ID to use when referring to this catalog programmatically.
     * Catalog IDs must be unique across all catalogs in the HERE platform.
     * Do not put private information in the catalog ID. The catalog ID forms a portion of the catalog's HERE Resource Name (HRN),
     * and HRNs are visible to other users.
     */
    id: string;
    /**
     * The layers in the catalog.
     */
    layers: Layer[];
    /**
     * The short name for the catalog.
     */
    name: string;
    notifications?: Notifications;
    owner?: Owner;
    replication: Replication;
    /**
     * A one-sentence summary of the catalog. You can see this summary when you browse a list of catalogs on the platform portal.
     */
    summary: string;
    /**
     * Some keywords that help to find the catalog when searching in the platform portal.
     */
    tags: Tags;
    /**
     * The version of the catalog configuration. Every change in this number indicates change in catalog configuration.
     * It is incremented every time you e.g. change catalog parameters, add layers etc.
     * Please note this is not metadata/data version as configuration and metadata versions
     * are independent of each other and indicate different kind of changes.
     */
    version: number;
}

/**
 * Describes the detailed status of the failed catalog creation operation.
 */
export interface CatalogFailureStatus {
    reason?: string;
    /**
     * Status of the operation
     */
    status?: string;
}

/**
 * Describes the status of the catalog modification action.
 */
export interface CatalogPendingStatus {
    /**
     * Status of the operation
     */
    status?: string;
}

/**
 * Describes the status of the successful catalog creation operation including its href.
 */
export interface CatalogSuccessStatus {
    item?: StatusLink;
    /**
     * Status of the operation
     */
    status?: string;
}

/**
 * Describes the main properties of the catalog.
 */
export interface CatalogSummary {
    /**
     * The link to the catalog details.
     */
    href?: string;
    /**
     * The HERE Resource Name (HRN) for the catalog.
     */
    hrn?: string;
    /**
     * The name of the catalog as specified in the \"name\" property when the catalog was created.
     */
    title?: string;
    /**
     * The type of the href. All hrefs are currently set to urn:olp-types:catalog
     */
    type?: string;
}

/**
 * List of the catalog summaries.
 */
export interface CatalogsList {
    items?: CatalogSummary[] | Catalog[];
}

/**
 * Contains a list of catalogs the user has access to.
 */
export interface CatalogsListResult {
    results?: CatalogsList;
}

/**
 * Identifies whether the data is compressed.
 */
export type ContentEncoding = "gzip";

/**
 * The MIME type of the data is stored in this layer.
 */
export type ContentType = string;

/**
 * The geographic area that this layer covers.
 */
export interface Coverage {
    /**
     * A list of ISO 3166 two-letter codes for countries and regions optionally followed by up to
     * three characters codes for subdivisions, such as 'DE', 'PL' or 'CN-HK'.
     */
    adminAreas?: string[];
}

/**
 * Describes the configuration of the catalog including its layer definitions.
 */
export interface CreateCatalog {
    /**
     * A detailed description of the catalog and what it contains.
     * This information appears on the 'Overview' tab when you open a catalog in the platform portal.
     */
    description: string;
    /**
     * The ID to use when referring to this catalog programmatically.
     * Catalog IDs must be unique across all catalogs in the HERE platform.
     * Do not put private information in the catalog ID. The catalog ID forms a portion of the catalog's HERE Resource Name (HRN),
     * and HRNs are visible to other users.
     * Only lowercase alphanumeric characters (a-z), digits (0-9) and dash (-) are allowed in a catalog ID.
     */
    id: string;
    /**
     * The layers in the catalog.
     */
    layers?: any[];
    /**
     * The short name for the catalog.
     */
    name: string;
    notifications?: Notifications;
    replication?: Replication;
    /**
     * A one-sentence summary of the catalog. You can see this summary when you browse a list of catalogs on the platform portal.
     */
    summary: string;
    /**
     * Some keywords that help to find the catalog when searching in the platform portal.
     */
    tags?: Tags;
    /**
     * The version of the catalog configuration.
     * Every change in this number indicates change in catalog configuration.
     * Examples of changes in catalog configuration include changing catalog parameters and adding layers.
     * Note that the catalog configuration version is not the same as the metadata/data version.
     * Configuration and metadata versions are independent of each other and indicate different kinds of changes.
     */
    version?: number;
}

/**
 * Describes properties of a catalog index layer.
 */
export interface CreateIndexLayer {
    billingTags: BillingTags;
    contentEncoding?: ContentEncoding;
    contentType: ContentType;
    coverage?: Coverage;
    description: LayerDescription;
    digest?: Digest;
    id: LayerId;
    indexProperties?: IndexProperties;
    layerType: IndexLayerType;
    name: LayerName;
    schema?: Schema;
    summary: LayerSummary;
    tags: Tags;
}

/**
 * Describes properties of a catalog stream layer.
 */
export interface CreateStreamLayer {
    billingTags: BillingTags;
    contentEncoding?: ContentEncoding;
    contentType: ContentType;
    coverage?: Coverage;
    description: LayerDescription;
    id: LayerId;
    layerType: StreamLayerType;
    name: LayerName;
    partitioning?: Partitioning;
    partitioningScheme?: DeprecatedPartitioningScheme;
    schema?: Schema;
    streamProperties?: StreamProperties;
    summary: LayerSummary;
    tags: Tags;
    ttl?: Ttl;
    ttlHours?: TtlHours;
    volume?: DurableVolume;
}

/**
 * Describes properties of a catalog versioned layer.
 */
export interface CreateVersionedLayer {
    billingTags: BillingTags;
    contentEncoding?: ContentEncoding;
    contentType: ContentType;
    coverage?: Coverage;
    description: LayerDescription;
    digest?: Digest;
    id: LayerId;
    layerType: VersionedLayerType;
    name: LayerName;
    partitioning?: Partitioning;
    partitioningScheme?: DeprecatedPartitioningScheme;
    schema?: Schema;
    summary: LayerSummary;
    tags: Tags;
}

/**
 * Describes properties of a catalog volatile layer.
 */
export interface CreateVolatileLayer {
    billingTags: BillingTags;
    contentEncoding?: ContentEncoding;
    contentType: ContentType;
    coverage?: Coverage;
    description: LayerDescription;
    digest?: Digest;
    id: LayerId;
    layerType: VolatileLayerType;
    name: LayerName;
    partitioning?: Partitioning;
    partitioningScheme?: DeprecatedPartitioningScheme;
    schema?: Schema;
    summary: LayerSummary;
    tags: Tags;
    ttl?: Ttl;
    ttlHours?: TtlHours;
    volume?: VolatileVolume;
}

export interface Creator {
    /**
     * The unique ID of the user or application that initially created the catalog.
     */
    id?: string;
}

/**
 * The name of the partitioning scheme for the layer.
 */
export type DeprecatedPartitioningScheme = "generic" | "heretile";

/**
 * The digest algorithm used to calculate the checksum for the partitions in this layer.
 * If specified, you can assume that all partitions in the layer, at every version, were calculated using this algorithm.
 * Note that it is the responsibility of the data publisher to use this algorithm to calculate partition checksums.
 * The HERE platform does not verify that the specified algorithm was actually used.
 */
export type Digest = "MD5" | "SHA-1" | "SHA-256";

/**
 * Describes a catalog durable volume to be used for storing the layer's data content.
 */
export interface DurableVolume {
    volumeType: "durable";
}

/**
 * An HTTP Error message that the service provides when there is a problem with request.
 */
export interface ErrorMessage {
    /**
     * An error code that pertains to a specific error.
     */
    code?: string;
    /**
     * A set of validation error messages.
     */
    errors?: ValidationErrorMessage[];
    /**
     * A message that describes the cause of the error.
     */
    message?: string;
    /**
     * The HTTP status code of the error response.
     */
    status?: number;
}

export interface IndexDefinition {
    /**
     * timewindow - represents the time slice (NOT just point in time) and it denotes the finest
     * time granularity at which the data will be indexed and later queried. Time type has an attribute duration which represents the
     * time slice length.It is NOT mutable. Both time key value and time type duration
     * is expressed in milliseconds (time value is milliseconds since Epoch). Value of duration is between 10 minutes and 1 day in millis
     */
    duration?: number;
    name?: string;
    type?: TypeEnum;
    /**
     * heretile - represents the tile id in the HERE tile map tiling scheme. heretile type has an attribute zoomLevel
     * which represents the size of the tile and it's NOT mutable.
     */
    zoomLevel?: number;
}

export type TypeEnum = "bool" | "int" | "string" | "heretile" | "timewindow";
/**
 * Describes the catalog index layer properties.
 */
export interface IndexLayer {
    billingTags: BillingTags;
    contentEncoding?: ContentEncoding;
    contentType: ContentType;
    coverage?: Coverage;
    created: LayerCreated;
    description: LayerDescription;
    digest?: Digest;
    hrn: LayerHrn;
    id: LayerId;
    indexProperties: IndexProperties;
    layerType: IndexLayerType;
    name: LayerName;
    schema?: Schema;
    summary: LayerSummary;
    tags: Tags;
    volume: DurableVolume;
}

/**
 * The type of data availability that this layer provides.
 */
export type IndexLayerType = "index";

export interface IndexProperties {
    indexDefinitions?: IndexDefinition[];
    /**
     * Amount of time data will remain in index layer. If not specified it defaults to 7 days
     */
    ttl?: TtlEnum;
}

export type TtlEnum =
    | "7.days"
    | "15.days"
    | "1.month"
    | "2.months"
    | "3.months"
    | "4.months"
    | "6.months"
    | "1.year"
    | "1.5.years"
    | "2.year"
    | "unlimited";
/**
 * The layer creation timestamp.
 */
export type LayerCreated = string;

/**
 * A detailed description of the layer and what it contains.
 * This information appears on the 'Overview' tab when you open a layer in the platform portal.
 */
export type LayerDescription = string;

/**
 * The HERE Resource Name (HRN) of the layer.
 */
export type LayerHrn = string;

/**
 * The ID to use when referring to this layer programmatically.
 */
export type LayerId = string;

/**
 * The display name for the layer.
 */
export type LayerName = string;

/**
 * A one-sentence summary of the layer. You can see this summary when you browse a list of layers on the platform portal.
 */
export type LayerSummary = string;

export interface Notifications {
    /**
     * If set to true, then a notification is written to the notification stream each time the version of the catalog changes.
     */
    enabled?: boolean;
}

export interface Organisation {
    /**
     * The ID of the customer organisation relating to this catalog
     */
    id?: string;
}

export interface Owner {
    creator?: Creator;
    organisation?: Organisation;
}

/**
 * Describes the way in which data is partitioned within the layer
 */
export interface Partitioning {
    /**
     * The name of the partitioning scheme for the layer.
     */
    scheme: PartitioningScheme;
    /**
     * A list of quadtree tile levels which contain data partitions. Only used if the partitioningScheme is heretile.
     */
    tileLevels?: number[];
}

/**
 * The name of the partitioning scheme for the layer.
 */
export type PartitioningScheme = "generic" | "heretile";

/**
 * Describes the modification of the catalog configuration.
 */
export interface PatchCatalog {
    /**
     * A detailed description of the catalog and what it contains.
     * This information appears on the 'Overview' tab when you open a catalog in the platform portal.
     * Field is optional, specify value to modify catalog description. This field is not removable, null value is not allowed
     */
    description?: string;
    /**
     * The short name for the catalog. Field is optional, specify value to modify catalog name.
     * This field is not removable, null value is not allowed
     */
    name?: string;
    /**
     * If set to true, then a notification is written to the notification stream each time the version of the catalog changes.
     * Field is optional, specify value to modify notifications. This field is not removable, null value is not allowed
     */
    notifications?: Notifications;
    replication?: Replication;
    /**
     * A one-sentence summary of the catalog. You can see this summary when you browse a list of catalogs on the platform portal.
     * Field is optional, specify value to modify catalog summary. This field is not removable, null value is not allowed
     */
    summary?: string;
    /**
     * Some keywords that help to find the catalog when searching in the platform portal. Field is optional,
     * specify value to replace all list of tags. This field is not removable, null value is not allowed
     */
    tags?: Tags;
}

/**
 * Describes the modification of the layer configuration.
 */
export interface PatchLayer {
    /**
     * List of billing tags a free-form tag which is used for grouping billing records together.
     * If supplied, it must be between 4 - 16 characters, contain only alphanumeric ASCII characters [A-Za-z0-9].
     * Field is optional, specify value to replace all list of billing tags. This field is not removable, null value is not allowed.
     */
    billingTags?: BillingTags;
    /**
     * The geographic areas that this layer covers, grouped by administrative divisions. Field is optional,
     * specify value to modify layer coverage. This field is not removable, null value is not allowed
     */
    coverage?: Coverage;
    /**
     * A detailed description of the layer and what it contains. This information appears on the
     * 'Overview' tab when you open a layer in the platform portal. Field is optional, specify value to modify layer description.
     * This field is not removable, null value is not allowed
     */
    description?: string;
    /**
     * The short name for the layer. Field is optional, specify value to modify layer name.
     * This field is not removable, null value is not allowed
     */
    name?: string;
    /**
     * Defines how data is partitioned within the layer. Field is optional, specify value to modify layer partitioning.
     * This field is not removable, null value is not allowed
     */
    partitioning?: Partitioning;
    /**
     * The HRN of the data schema for this layer. Field is optional, specify value to modify layer schema.
     * This field is not removable, null value is not allowed
     */
    schema?: Schema;
    /**
     * A one-sentence summary of the layer. You can see this summary when you browse a list of layers on the platform portal.
     * Field is optional, specify value to modify layer summary. This field is not removable, null value is not allowed
     */
    summary?: string;
    /**
     * Some keywords that help to find the layer when searching in the platform portal. Field is optional,
     * specify value to replace all list of tags. This field is not removable, null value is not allowed
     */
    tags?: Tags;
}

export interface Replication {
    /**
     * A list of the catalog's replication regions and each region's role. For multi-region replication catalogs
     * list should contain multiple items where at least one should be with `primary` role.
     * For single region catalogs should define `primary` region. Currently only `eu-ireland` is allowed as primary region
     */
    regions?: ReplicationRegion[];
}

export interface ReplicationRegion {
    /**
     * The ID of the region.
     */
    id: IdEnum;
    /**
     * Indicates whether the region is a primary or failover region. One of the following:
     * `primary` - The region is used by default for reading and writing. `secondary` - The region used as a failover region.
     */
    role?: RoleEnum;
}

export type IdEnum = "eu-ireland" | "us-oregon";
export type RoleEnum = "primary" | "secondary";
/**
 * Describes a HRN for the layer schema
 */
export interface Schema {
    hrn?: string;
}

/**
 * Describes the status and href of the create/update/delete resource such as a catalog.
 */
export interface StatusLink {
    /**
     * href of the created/update/delete catalog action
     */
    href?: string;
    /**
     * token of the created/update/delete catalog action
     */
    configToken?: string;
    /**
     * Title of the action.
     */
    title?: string;
    /**
     * Type of the href.
     */
    type?: string;
}

/**
 * Describes the catalog stream layer properties.
 */
export interface StreamLayer {
    billingTags: BillingTags;
    contentEncoding?: ContentEncoding;
    contentType: ContentType;
    coverage?: Coverage;
    created: LayerCreated;
    description: LayerDescription;
    hrn: LayerHrn;
    id: LayerId;
    layerType: StreamLayerType;
    name: LayerName;
    partitioning: Partitioning;
    partitioningScheme: DeprecatedPartitioningScheme;
    schema?: Schema;
    streamProperties: StreamProperties;
    summary: LayerSummary;
    tags: Tags;
    ttl: Ttl;
    ttlHours: TtlHours;
    volume: DurableVolume;
}

/**
 * The type of data availability that this layer provides.
 */
export type StreamLayerType = "stream";

/**
 * Properties that define the scale of the required streaming service.
 */
export interface StreamProperties {
    /**
     * Maximum throughput for incoming data expressed in megabytes per second.
     * Throttling occurs when the inbound rate exceeds the maximum inbound throughput. The default is 4 MBps. The maximum is 32 MBps.
     */
    dataInThroughputMbps?: number;
    /**
     * Maximum throughput for outgoing data expressed in megabytes per second.
     * Throttling occurs when the total outbound rate to all consumers exceeds the maximum outbound throughput.
     * The default is 8 MBps. The maximum is 64 MBps.
     */
    dataOutThroughputMbps?: number;
}

/**
 * Some keywords that help to find the layer when searching in the platform portal.
 */
export type Tags = string[];

/**
 * The expiry time in milliseconds for data in this layer.
 * Data is automatically removed after the specified time limit has elapsed. For volatile layers the
 * TTL value must be between 60000 (1 minute) and 604800000 (7 days). For stream layers the TTL
 *  value must be between 600000 (10 minutes) and 259200000 (72 hours).
 */
export type Ttl = number;

/**
 * The expiry time in hours for data in this layer. Data is automatically removed after the specified time limit has elapsed.
 */
export type TtlHours = number;

/**
 * HTTP Error message thrown by the service.
 */
export interface ValidationErrorMessage {
    /**
     * Error code that pertains to a specific error.
     */
    code?: string;
    /**
     * The field of the object that is invalid. The field follows RFC 6901 JSON Pointer (see: https://tools.ietf.org/html/rfc6901).
     */
    field?: string;
    /**
     * The value that is invalid that was sent.
     */
    invalidValue?: any;
    /**
     * This is the message for the error.
     */
    message?: string;
    /**
     * Duplicate of the HTTP status that is returned.
     */
    status?: number;
}

/**
 * Describes the catalog versioned layer properties.
 */
export interface VersionedLayer {
    billingTags: BillingTags;
    contentEncoding?: ContentEncoding;
    contentType: ContentType;
    coverage?: Coverage;
    created: LayerCreated;
    description: LayerDescription;
    digest?: Digest;
    hrn: LayerHrn;
    id: LayerId;
    layerType: VersionedLayerType;
    name: LayerName;
    partitioning: Partitioning;
    partitioningScheme: DeprecatedPartitioningScheme;
    schema?: Schema;
    summary: LayerSummary;
    tags: Tags;
    volume: DurableVolume;
}

/**
 * The type of data availability that this layer provides.
 */
export type VersionedLayerType = "versioned";

/**
 * Describes the catalog volatile layer properties.
 */
export interface VolatileLayer {
    billingTags: BillingTags;
    contentEncoding?: ContentEncoding;
    contentType: ContentType;
    coverage?: Coverage;
    created: LayerCreated;
    description: LayerDescription;
    digest?: Digest;
    hrn: LayerHrn;
    id: LayerId;
    layerType: VolatileLayerType;
    name: LayerName;
    partitioning: Partitioning;
    partitioningScheme: DeprecatedPartitioningScheme;
    schema?: Schema;
    summary: LayerSummary;
    tags: Tags;
    ttl: Ttl;
    ttlHours: TtlHours;
    volume: VolatileVolume;
}

/**
 * The type of data availability that this layer provides.
 */
export type VolatileLayerType = "volatile";

/**
 * Describes a catalog volatile volume to be used for storing the layer's data content.
 */
export interface VolatileVolume {
    /**
     * Define keys eviction policy when the memory limit for volatile layer is reached
     */
    maxMemoryPolicy?: MaxMemoryPolicyEnum;
    /**
     * Define initial package type (capacity) of the volatile layer
     */
    packageType?: PackageTypeEnum;
    volumeType: "volatile";
}

export type MaxMemoryPolicyEnum = "failOnWrite" | "replaceLessRecentlyUsedKey";
export type PackageTypeEnum = "experimental" | "small" | "medium" | "large";

/* ===================================================================
 * ConfigApi
 */

/**
 * Checks whether a catalog with the specified HRN exists.
 *
 * @summary Checks the existence of a catalog
 * @param catalogHrn The HERE Resource Name (HRN) of the catalog.
 * @param billingTag Billing Tag is an optional free-form tag which is used for grouping
 * billing records together. If supplied, it must be between 4 - 16 characters, contain only alphanumeric ASCII characters [A-Za-z0-9].
 */
export async function catalogExists(
    builder: RequestBuilder,
    params: { catalogHrn: string; billingTag?: string }
): Promise<any> {
    const baseUrl = "/catalogs/{catalogHrn}".replace(
        "{catalogHrn}",
        UrlBuilder.toString(params["catalogHrn"])
    );

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);
    urlBuilder.appendQuery("billingTag", params["billingTag"]);

    const headers: { [header: string]: string } = {};
    const options: RequestOptions = {
        method: "HEAD",
        headers
    };

    return builder.request<any>(urlBuilder, options);
}

/**
 * Creates a new catalog with the specified layers. The create catalog operation runs asynchronously.
 *  Once you've submitted the catalog for creation, you'll receive a randomly
 * generated token that you can use to monitor the status of the operation.
 *
 * @summary Creates a catalog
 * @param body A catalog object that contains metadata and layer definitions.
 * @param billingTag Billing Tag is an optional free-form tag which is used for
 *  grouping billing records together. If supplied, it must be between 4 - 16 characters,
 * contain only alphanumeric ASCII characters [A-Za-z0-9].
 */
export async function createCatalog(
    builder: RequestBuilder,
    params: { body: CreateCatalog; billingTag?: string }
): Promise<StatusLink> {
    const baseUrl = "/catalogs";

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);
    urlBuilder.appendQuery("billingTag", params["billingTag"]);

    const headers: { [header: string]: string } = {};
    const options: RequestOptions = {
        method: "POST",
        headers
    };
    headers["Content-Type"] = "application/json";
    if (params["body"] !== undefined) {
        options.body = JSON.stringify(params["body"]);
    }

    return builder.request<StatusLink>(urlBuilder, options);
}

/**
 * Deletes a catalog and any layers within that catalog.
 *
 * @summary Deletes a catalog
 * @param catalogHrn The HERE Resource Name (HRN) of the catalog.
 * @param billingTag Billing Tag is an optional free-form tag which is used for grouping billing records together.
 * If supplied, it must be between 4 - 16 characters, contain only alphanumeric ASCII characters [A-Za-z0-9].
 */
export async function deleteCatalog(
    builder: RequestBuilder,
    params: { catalogHrn: string; billingTag?: string }
): Promise<StatusLink> {
    const baseUrl = "/catalogs/{catalogHrn}".replace(
        "{catalogHrn}",
        UrlBuilder.toString(params["catalogHrn"])
    );

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);
    urlBuilder.appendQuery("billingTag", params["billingTag"]);

    const headers: { [header: string]: string } = {};
    const options: RequestOptions = {
        method: "DELETE",
        headers
    };

    return builder.request<StatusLink>(urlBuilder, options);
}

/**
 * Delete a layer of the catalog, if it's of layerType 'index', 'volatile' or 'stream'. Other layerTypes are currently not supported.
 *
 * @summary Delete a layer
 * @param catalogHrn The HERE Resource Name (HRN) of the catalog.
 * @param layerId The layer ID.
 */
export async function deleteLayer(
    builder: RequestBuilder,
    params: { catalogHrn: string; layerId: string }
): Promise<StatusLink> {
    const baseUrl = "/catalogs/{catalogHrn}/layers/{layerId}"
        .replace("{catalogHrn}", UrlBuilder.toString(params["catalogHrn"]))
        .replace("{layerId}", UrlBuilder.toString(params["layerId"]));

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);

    const headers: { [header: string]: string } = {};
    const options: RequestOptions = {
        method: "DELETE",
        headers
    };

    return builder.request<StatusLink>(urlBuilder, options);
}

/**
 * Gets the full catalog configuration for the requested catalog. The catalog configuration contains descriptive and structural
 * information such as layer definitions and layer types.
 *
 * @summary Gets the details of a catalog
 * @param catalogHrn The HERE Resource Name (HRN) of the catalog.
 * @param billingTag Billing Tag is an optional free-form tag which is used for grouping billing records together. If supplied,
 * it must be between 4 - 16 characters, contain only alphanumeric ASCII characters [A-Za-z0-9].
 */
export async function getCatalog(
    builder: RequestBuilder,
    params: { catalogHrn: string; billingTag?: string }
): Promise<Catalog> {
    const baseUrl = "/catalogs/{catalogHrn}".replace(
        "{catalogHrn}",
        UrlBuilder.toString(params["catalogHrn"])
    );

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);
    urlBuilder.appendQuery("billingTag", params["billingTag"]);

    const headers: { [header: string]: string } = {};
    const options: RequestOptions = {
        method: "GET",
        headers
    };

    return builder.request<Catalog>(urlBuilder, options);
}

/**
 * Takes the randomly generated token that you receive when you submit a catalog for creation.
 * You can use it to monitor the status of your request.
 *
 * @summary Gets the status of a create, update or delete catalog request
 * @param token The token of catalog creation, modification or deletion task.
 * @param billingTag Billing Tag is an optional free-form tag which is used for grouping billing
 * records together. If supplied, it must be between 4 - 16 characters, contain only alphanumeric ASCII characters [A-Za-z0-9].
 */
export async function getCatalogStatus(
    builder: RequestBuilder,
    params: { token: string; billingTag?: string }
): Promise<CatalogPendingStatus> {
    const baseUrl = "/status/{token}".replace(
        "{token}",
        UrlBuilder.toString(params["token"])
    );

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);
    urlBuilder.appendQuery("billingTag", params["billingTag"]);

    const headers: { [header: string]: string } = {};
    const options: RequestOptions = {
        method: "GET",
        headers
    };

    return builder.request<CatalogPendingStatus>(urlBuilder, options);
}

/**
 * Lists all catalogs that your account has access to. To get access to a catalog,
 * your administrator must associate it in your HERE platform account.
 * By default, the list provides summary data for each catalog such as the title, configuration URL and resource type.
 *
 * @summary Gets a list of all catalogs
 * @param billingTag Billing Tag is an optional free-form tag which is used for
 * grouping billing records together. If supplied, it must be between 4 - 16 characters,
 * contain only alphanumeric ASCII characters [A-Za-z0-9].
 * @param verbose Indicates if the response should contain fully expanded catalog configurations
 * @param q Works only when the verbose flag is set to true. The result contains only those
 * items which have the given string as a part of the value of one or more searchable fields
 * (substring compare). It&#39;ll search following catalog details fields: id, name, summary,
 * description, tags and layer details: id, name, summary, description, tags, schema-hrn
 * @param organisation Works only when the verbose flag is set to true. Filters only catalogs
 *  (layers) belonging to specified organisation. Filtering is done only on catalog (layer) owner
 *  organisation id. No organisation means to search for all
 * @param organisationType Works only when the verbose flag is set to true. Filters only catalogs
 *  belonging to organisation. If &#39;myOrganisation&#39;, searches catalogs (layers) with the same
 *  owner organisation id like requester. If &#39;here&#39;, searches catalogs (layers) with owner
 *  organisation id is equal to Here organisation. If &#39;other&#39;, searches catalogs (layers) with
 *  owner organisation id is not equal to requester organisation and not equal to Here organisation.
 *  No organisationType means to search for all.
 * @param layerType Works only when the verbose flag is set to true. Comma separated list of layer
 * types (with OR semantic) to look for in the layer type. Filters only catalogs that contain layer
 *  with layer type presented in given list. No layerType means to search for all.
 * @param region Works only when the verbose flag is set to true. Comma separated list of regions
 * (with OR semantic) to look for in the catalog replication configuration. Filters only catalogs
 * that contain region presented in given list. No region means search for all.
 * @param schemaHrn Works only when the verbose flag is set to true. Filters only catalogs
 *  (layers) by the specified layer schema HRN. Filtering is done only on layer schema.
 *  No schema means to search for all.
 * @param resourceType Works only when the verbose flag is set to true. Specifies other filters behavior.
 *  If &#39;catalog&#39;, applies other filters to search catalogs (and layers inside). If &#39;layer&#39;,
 *  applies other filters to search layers. Return json structure is the same for both cases
 * (list of catalogs with list of layers inside each catalog).
 * @param coverage Works only when the verbose flag is set to true. Comma separated list of countries
 * (with OR semantic) to look for in the catalog (layer) coverage. Only catalogs (layers)
 * covering specified countries will be returned. Field is treated case insensitive. No coverage means to include all countries.
 * @param access Works only when the verbose flag is set to true. Comma separated list of access
 * types (with OR semantic) to filter result. If &#39;default&#39;, returns catalogs user have read
 * or manage access to. If &#39;create&#39;, returns catalogs user have created and match owner.creator
 *  field, If &#39;manage&#39;, returns catalogs user have have manage access to. If &#39;orgAdmin&#39;,
 * returns catalogs OrgAdmin user have access to.
 * @param limit Works only when the verbose flag is set to true. When provided result element count will
 *  be limited to this value. Minimum: 1
 * @param sortBy Works only when the verbose flag is set to true. Specifies sort field.
 *  If &#39;name&#39;, sorts catalogs by catalog name. If &#39;created&#39;, sorts catalogs
 *  by catalog create time. Layers inside catalog are always sorted by layer name. No sortBy means sort by &#39;name&#39;
 * @param sortOrder Works only when the verbose flag is set to true. Specifies sort order.
 *  If &#39;asc&#39;, sorts ascending. If &#39;desc&#39;, sorts descending. No sortOrder means sort order &#39;asc&#39;
 */
export async function getCatalogs(
    builder: RequestBuilder,
    params: {
        billingTag?: string;
        verbose?: any;
        q?: string;
        organisation?: string;
        organisationType?: Array<"myOrganisation" | "here" | "other">;
        layerType?: Array<"versioned" | "stream" | "volatile">;
        region?: Array<"eu-ireland" | "us-oregon" | "cn-ningxia">;
        schemaHrn?: string;
        resourceType?: "catalog" | "layer";
        coverage?: string[];
        access?: Array<"default" | "create" | "manage" | "orgAdmin">;
        limit?: number;
        sortBy?: "name" | "created";
        sortOrder?: "asc" | "desc";
    }
): Promise<CatalogsListResult> {
    const baseUrl = "/catalogs";

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);
    urlBuilder.appendQuery("billingTag", params["billingTag"]);
    urlBuilder.appendQuery("verbose", params["verbose"]);
    urlBuilder.appendQuery("q", params["q"]);
    urlBuilder.appendQuery("organisation", params["organisation"]);
    urlBuilder.appendQuery("organisationType", params["organisationType"]);
    urlBuilder.appendQuery("layerType", params["layerType"]);
    urlBuilder.appendQuery("region", params["region"]);
    urlBuilder.appendQuery("schemaHrn", params["schemaHrn"]);
    urlBuilder.appendQuery("resourceType", params["resourceType"]);
    urlBuilder.appendQuery("coverage", params["coverage"]);
    urlBuilder.appendQuery("access", params["access"]);
    urlBuilder.appendQuery("limit", params["limit"]);
    urlBuilder.appendQuery("sortBy", params["sortBy"]);
    urlBuilder.appendQuery("sortOrder", params["sortOrder"]);

    const headers: { [header: string]: string } = {};
    const options: RequestOptions = {
        method: "GET",
        headers
    };

    return builder.request<CatalogsListResult>(urlBuilder, options);
}

/**
 * Modify some fields of the catalog.
 * The existing HTTP PUT method only allows a complete replacement of a catalog configuration,
 * HTTP PATCH method is used to modify some fields of existing catalog configuration.
 * All fields are optional. Specify field value to modify it, not specified fields are ignored.
 * To remove field value use null value (for more information see RFC 7396 - JSON Merge Patch).
 *
 * @summary Modify a catalog
 * @param catalogHrn The HERE Resource Name (HRN) of the catalog.
 * @param body A catalog object that contains modification of catalog configuration.
 */
export async function patchCatalog(
    builder: RequestBuilder,
    params: { catalogHrn: string; body: PatchCatalog }
): Promise<StatusLink> {
    const baseUrl = "/catalogs/{catalogHrn}".replace(
        "{catalogHrn}",
        UrlBuilder.toString(params["catalogHrn"])
    );

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);

    const headers: { [header: string]: string } = {};
    const options: RequestOptions = {
        method: "PATCH",
        headers
    };
    headers["Content-Type"] = "application/json";
    if (params["body"] !== undefined) {
        options.body = JSON.stringify(params["body"]);
    }

    return builder.request<StatusLink>(urlBuilder, options);
}

/**
 * Modify some fields of the catalog layer. HTTP PATCH method is used to modify
 * some fields of existing layer configuration. All fields are optional.
 * Specify field value to modify it, not specified fields are ignored.
 * To remove field value use null value (for more information see RFC 7396 - JSON Merge Patch).
 *
 * @summary Modify a catalog layer
 * @param catalogHrn The HERE Resource Name (HRN) of the catalog.
 * @param layerId The layer ID.
 * @param body A layer object that contains modification of layer configuration.
 */
export async function patchLayer(
    builder: RequestBuilder,
    params: { catalogHrn: string; layerId: string; body: PatchLayer }
): Promise<StatusLink> {
    const baseUrl = "/catalogs/{catalogHrn}/layers/{layerId}"
        .replace("{catalogHrn}", UrlBuilder.toString(params["catalogHrn"]))
        .replace("{layerId}", UrlBuilder.toString(params["layerId"]));

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);

    const headers: { [header: string]: string } = {};
    const options: RequestOptions = {
        method: "PATCH",
        headers
    };
    headers["Content-Type"] = "application/json";
    if (params["body"] !== undefined) {
        options.body = JSON.stringify(params["body"]);
    }

    return builder.request<StatusLink>(urlBuilder, options);
}

/**
 * Updates any descriptive and structural information in the catalog.
 * To update a catalog, send a new version of your catalog configuration with the updated data and any required fields.
 *
 * @summary Updates a catalog
 * @param catalogHrn The HERE Resource Name (HRN) of the catalog.
 * @param body A catalog object that contains metadata and layer definitions.
 * @param billingTag Billing Tag is an optional free-form tag which is used for
 *  grouping billing records together. If supplied, it must be between 4 - 16 characters,
 * contain only alphanumeric ASCII characters [A-Za-z0-9].
 */
export async function updateCatalog(
    builder: RequestBuilder,
    params: { catalogHrn: string; body: CreateCatalog; billingTag?: string }
): Promise<StatusLink> {
    const baseUrl = "/catalogs/{catalogHrn}".replace(
        "{catalogHrn}",
        UrlBuilder.toString(params["catalogHrn"])
    );

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);
    urlBuilder.appendQuery("billingTag", params["billingTag"]);

    const headers: { [header: string]: string } = {};
    const options: RequestOptions = {
        method: "PUT",
        headers
    };
    headers["Content-Type"] = "application/json";
    if (params["body"] !== undefined) {
        options.body = JSON.stringify(params["body"]);
    }

    return builder.request<StatusLink>(urlBuilder, options);
}
