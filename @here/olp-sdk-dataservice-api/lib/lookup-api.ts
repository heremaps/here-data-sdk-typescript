/*
 * Copyright (C) 2019 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

/**
 * API Lookup Service v1
 * The API Lookup Service is a platform service with following goals:
 * - Redirect users to REST APIs related to a resource identified by an HRN
 * - Given an HRN, provide parameters to be used in REST APIs calls. - Discovery of other HERE APIs.
 *
 * OpenAPI spec version: 1.0.3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Do not edit the class manually.
 */

import { RequestBuilder, RequestOptions, UrlBuilder } from "./RequestBuilder";

export interface API {
    /**
     * The name of the API.
     */
    api: string;
    /**
     * The version of the API.
     */
    version: string;
    /**
     * The base URL to use when constructing HTTP calls to the API.
     * Concatenate the base URL with the API path shown in the API specification.
     * For example, for the 'config' API's catalog list endpoint, you would construct the URL as follows:
     * 'https://config.data.api.platform.here.com/config/v1' + '/catalogs'
     * where the first part of the URL is the base URL and the second part is the API path.
     */
    baseURL: string;
    parameters?: { [key: string]: string };
}

export interface ApiNotFoundError {
    /**
     * Repetition of the HTTP error code
     */
    status?: number;
    /**
     * Short description of the error
     */
    title?: string;
    /**
     * Complete details of the error
     */
    detail?: Array<{ name: string; error: string }>;
    error?: string;
    error_description?: string;
}

/* ===================================================================
 * PlatformApi
 */

/**
 * Return details of a single platform API. This response is valid for the time specified by 'Cache-Control' header.
 *
 * @summary Return details of a single platform API.
 * @param api The identifier of the API
 * @param version The version of the API
 */
export async function platformAPI(
    builder: RequestBuilder,
    params: { api: string; version: string }
): Promise<API[] | ApiNotFoundError> {
    const baseUrl = "/platform/apis/{api}/{version}"
        .replace("{api}", UrlBuilder.toString(params["api"]))
        .replace("{version}", UrlBuilder.toString(params["version"]));

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);

    const headers: { [header: string]: string } = {};
    const options: RequestOptions = {
        method: "GET",
        headers
    };

    return builder.request<API[]>(urlBuilder, options);
}

/**
 * Return the list of the HERE APIs. This response is valid for the time specified by 'Cache-Control' header.
 *
 * @summary Return the list of the HERE APIs.
 */
export async function getPlatformAPIList(
    builder: RequestBuilder
): Promise<Response> {
    const baseUrl = "/platform/apis";

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);

    const headers: { [header: string]: string } = {};
    const options: RequestOptions = {
        method: "GET",
        headers
    };

    return builder.requestBlob(urlBuilder, options);
}

/* ===================================================================
 * ResourcesApi
 */

/**
 * Return details of a single API for a given resource identified by hrn, api and version.
 * This response is valid for the time specified by 'Cache-Control' header.
 *
 * @summary Return details of a single API for a given resource.
 * @param hrn The HRN identifying the resource
 * @param api The identifier of the API
 * @param version The version of the API
 * @param region If you want to look up a specific region for a given resource.
 */
export async function resourceAPI(
    builder: RequestBuilder,
    params: { hrn: string; api: string; version: string; region?: string }
): Promise<API[] | ApiNotFoundError> {
    const baseUrl = "/resources/{hrn}/apis/{api}/{version}"
        .replace("{hrn}", UrlBuilder.toString(params["hrn"]))
        .replace("{api}", UrlBuilder.toString(params["api"]))
        .replace("{version}", UrlBuilder.toString(params["version"]));

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);
    urlBuilder.appendQuery("region", params["region"]);

    const headers: { [header: string]: string } = {};
    const options: RequestOptions = {
        method: "GET",
        headers
    };

    return builder.request<API[]>(urlBuilder, options);
}

/**
 * Return the list of APIs for a given resource identified by hrn. This response is valid for the time specified by 'Cache-Control' header.
 *
 * @summary Return the list of APIs for a given resource.
 * @param hrn The HRN identifying the resource
 * @param region If you want to look up a specific region for a given resource.
 */
export async function getResourceAPIList(
    builder: RequestBuilder,
    params: { hrn: string; region?: string }
): Promise<Response> {
    const baseUrl = "/resources/{hrn}/apis".replace(
        "{hrn}",
        UrlBuilder.toString(params["hrn"])
    );

    const urlBuilder = new UrlBuilder(builder.baseUrl + baseUrl);
    urlBuilder.appendQuery("region", params["region"]);

    const headers: { [header: string]: string } = {};
    const options: RequestOptions = {
        method: "GET",
        headers
    };

    return builder.requestBlob(urlBuilder, options);
}
